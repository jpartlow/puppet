---
name: Beaker Acceptance Tests
run-name: |-
  Beaker acceptance tests for ${{ inputs.pre-release-build && 'pre-release' || 'release' }} packages of
  openvox-agent
  ${{ (inputs.pre-release-build && inputs.openvox-agent-version) ||
      format(' collection: "{0}", version: "{1}" ',
             inputs.collection,
             ((inputs.openvox-agent-version == '') && 'latest') ||
              inputs.openvox-agent-version) }}
  and openvox-server
  ${{ (inputs.pre-release-build && inputs.openvox-server-version) ||
      format(' collection: "{0}", version: "{1}" ',
             inputs.collection,
             ((inputs.openvox-server-version == '') && 'latest') ||
              inputs.openvox-server-version) }}

on:
  workflow_dispatch:
    inputs:
      pre-release-build:
        description: |-
          (Pre-release Build) Whether to test unreleased version
          packages from the artifacts server, or released packages
          from the given collection.

          If this is true, versions must be valid version, not
          latest, and collection is ignored. The workflow will
          download and install the matching openvox package files
          from the artifacts-url server.

          If this is false, version and collection must match, and the
          workflow will install the given openvox collection package
          and then let the system package manager install the latest
          or version packages from the collection repository.
        default: true
        type: boolean
      openvox-agent-version:
        description: |-
          (OpenVox Agent Version) The openvox-agent package version to
          test. (required if Pre-release Build is true)
        type: string
      openvox-server-version:
        description: |-
          (OpenVox Server Version) The openvox-server package version
          to test. (required if Pre-release Build is true)
        type: string
      collection:
        description: |-
          (Collection) OpenVox collection to use. (ignored if
          Pre-release Build is true)

          NOTE: This should really only be set to openvox7 when testing
          with the branch 7.x test suite.
        default: 'openvox7'
        type: string
      artifacts-url:
        description: |-
          URL to the artifacts server. (used if Pre-release Build is
          true)
        default: 'https://s3.osuosl.org/openvox-artifacts'
        type: string

permissions:
  contents: read

env:
  RUBY_VERSION: '3.3'
  # Suppress warnings about Bolt gem versus package use.
  BOLT_GEM: true

jobs:
  acceptance:
    name: Acceptance Tests
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        os:
          - [almalinux, '8']
          - [almalinux, '9']
          - [debian, '10']
          - [debian, '11']
          - [debian, '12']
          # No Debian 13 in 7.x
          - [rocky, '8']
          - [rocky, '9']
          - [ubuntu, '18.04']
          - [ubuntu, '20.04']
          - [ubuntu, '22.04']
          - [ubuntu, '24.04']
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: vm-cluster
        uses: jpartlow/nested_vms@v1
        with:
          os: ${{ matrix.os[0] }}
          os-version: ${{ matrix.os[1] }}
          os-arch: ${{ matrix.os[2] || 'x86_64' }}
          image_version: ${{ matrix.os[3] }}
          host-root-access: true
          ruby-version: ${{ env.RUBY_VERSION }}
          install-openvox: false
          # Note: the cpu_mode is set to host-model for the sake of
          # el-9 which expects at least x86_64-2 arch. This depends on
          # the runner's architecture being sufficient, and there is
          # probably a better way to get this set on the libvirt
          # domain instead.
          vms: |-
            [
              {
                "role": "primary",
                "count": 1,
                "cpus": 4,
                "mem_mb": 4096,
                "cpu_mode": "host-model"
              }
            ]
      - name: Write Install OpenVox Params
        working-directory: kvm_automation_tooling
        env:
          OPENVOX_ARTIFACTS_URL: |-
            ${{ github.event.inputs.artifacts-url }}
          OPENVOX_RELEASED: |-
            ${{ github.event.inputs.pre-release-build == 'false' }}
          OPENVOX_AGENT_VERSION: |-
            ${{ ((github.event.inputs.openvox-agent-version == '') && 'latest') ||
                 github.event.inputs.openvox-agent-version }}
          OPENVOX_SERVER_VERSION: |-
            ${{ ((github.event.inputs.openvox-server-version == '') && 'latest') ||
                 github.event.inputs.openvox-server-version }}
          OPENVOX_COLLECTION: ${{ github.event.inputs.collection }}
          # Generated by the nested_vms action.
          # This allows using just the Bolt inventory group names for
          # the target params below.
          INVENTORY: terraform/instances/inventory.test.yaml
        run: |-
          cat > install_openvox_params.json <<EOF
          {
            "openvox_agent_targets": "all",
            "openvox_server_targets": "primary",
            "openvox_agent_params": {
              "openvox_collection": "${OPENVOX_COLLECTION}",
              "openvox_version": "${OPENVOX_AGENT_VERSION}",
              "openvox_released": ${OPENVOX_RELEASED},
              "openvox_artifacts_url": "${OPENVOX_ARTIFACTS_URL}"
            },
            "openvox_server_params": {
              "openvox_collection": "${OPENVOX_COLLECTION}",
              "openvox_version": "${OPENVOX_SERVER_VERSION}",
              "openvox_released": ${OPENVOX_RELEASED},
              "openvox_artifacts_url": "${OPENVOX_ARTIFACTS_URL}"
            },
            "install_defaults": {
              "openvox_version": "latest",
              "openvox_collection": "${OPENVOX_COLLECTION}",
              "openvox_released": true
            }
          }
          EOF
          cat install_openvox_params.json
      - name: Install OpenVox Components
        working-directory: kvm_automation_tooling
        env:
          # Generated by the nested_vms action.
          INVENTORY: terraform/instances/inventory.test.yaml
        run: |-
          bundle exec bolt plan run \
            kvm_automation_tooling::install_openvox \
            --inventory "${INVENTORY}" \
            --params @install_openvox_params.json
      - name: Construct hosts.yaml
        working-directory: kvm_automation_tooling
        env:
          HOSTS_YAML: ${{ github.workspace }}/acceptance/hosts.yaml
          # Generated by the nested_vms action.
          INVENTORY: terraform/instances/inventory.test.yaml
        run: |-
          bundle exec bolt plan run \
            kvm_automation_tooling::dev::generate_beaker_hosts_file \
            --inventory "${INVENTORY}" \
            hosts_yaml="${HOSTS_YAML}"
          cat "${HOSTS_YAML}"
      - name: Install Ruby and Run Bundler for Acceptance Tests
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          working-directory: acceptance
          bundler-cache: true
      - name: Run Beaker
        working-directory: acceptance
        env:
          # Generated by the nested_vms action.
          SSH_KEY: ~/.ssh/ssh-id-test
        run: |-
          bundle exec beaker init --hosts hosts.yaml \
            --preserve-hosts always --keyfile "${SSH_KEY}" \
            --pre-suite pre-suite \
            --tests tests
          # The provision step is still needed here, see notes in the
          # kvm_automation_tooling/templates/beaker-hosts.yaml.epp
          # template...
          bundle exec beaker provision
          bundle exec beaker exec
